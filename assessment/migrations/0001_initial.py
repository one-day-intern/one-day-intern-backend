# Generated by Django 4.1.1 on 2022-11-22 10:02

import datetime
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("users", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AssessmentEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("event_id", models.UUIDField(auto_created=True, default=uuid.uuid4)),
                ("name", models.CharField(max_length=50)),
                ("start_date_time", models.DateTimeField()),
                (
                    "owning_company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.company"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AssessmentEventParticipation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "assessee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.assessee"
                    ),
                ),
                (
                    "assessment_event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessment.assessmentevent",
                    ),
                ),
                (
                    "assessor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="users.assessor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AssessmentTool",
            fields=[
                (
                    "assessment_id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("description", models.TextField(null=True)),
                (
                    "owning_company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.company"
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "question_id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("prompt", models.TextField()),
                ("points", models.IntegerField(default=0)),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("text", "Text Question"),
                            ("multiple_choice", "Multiple Choice Question"),
                        ],
                        max_length=16,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TestFlow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "test_flow_id",
                    models.UUIDField(auto_created=True, default=uuid.uuid4),
                ),
                ("name", models.CharField(max_length=50)),
                ("is_usable", models.BooleanField(default=False)),
                (
                    "owning_company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.company"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TestFlowAttempt",
            fields=[
                (
                    "attempt_id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("note", models.TextField(null=True)),
                ("grade", models.FloatField(default=0)),
                (
                    "event_participation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessment.assessmenteventparticipation",
                    ),
                ),
                (
                    "test_flow_attempted",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="assessment.testflow",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ToolAttempt",
            fields=[
                (
                    "tool_attempt_id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("grade", models.FloatField(default=0)),
                (
                    "assessment_tool_attempted",
                    models.ForeignKey(
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessment.assessmenttool",
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "test_flow_attempt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessment.testflowattempt",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
        ),
        migrations.CreateModel(
            name="Assignment",
            fields=[
                (
                    "assessmenttool_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="assessment.assessmenttool",
                    ),
                ),
                ("expected_file_format", models.CharField(max_length=5, null=True)),
                ("duration_in_minutes", models.IntegerField()),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
            bases=("assessment.assessmenttool",),
        ),
        migrations.CreateModel(
            name="AssignmentAttempt",
            fields=[
                (
                    "toolattempt_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="assessment.toolattempt",
                    ),
                ),
                ("file_upload_directory", models.TextField(null=True)),
                ("filename", models.TextField(default=None, null=True)),
                ("submitted_time", models.DateTimeField(default=None, null=True)),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
            bases=("assessment.toolattempt",),
        ),
        migrations.CreateModel(
            name="InteractiveQuiz",
            fields=[
                (
                    "assessmenttool_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="assessment.assessmenttool",
                    ),
                ),
                ("duration_in_minutes", models.IntegerField()),
                ("total_points", models.IntegerField()),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
            bases=("assessment.assessmenttool",),
        ),
        migrations.CreateModel(
            name="MultipleChoiceQuestion",
            fields=[
                (
                    "question_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="assessment.question",
                    ),
                ),
            ],
            bases=("assessment.question",),
        ),
        migrations.CreateModel(
            name="TextQuestion",
            fields=[
                (
                    "question_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="assessment.question",
                    ),
                ),
                ("answer_key", models.TextField(null=True)),
            ],
            bases=("assessment.question",),
        ),
        migrations.CreateModel(
            name="VideoConferenceRoom",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("room_id", models.TextField(default=None, null=True)),
                ("room_opened", models.BooleanField(default=False)),
                (
                    "conference_participants",
                    models.ManyToManyField(to="users.assessor"),
                ),
                (
                    "part_of",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessment.assessmenteventparticipation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TestFlowTool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("release_time", models.TimeField(default=datetime.time(0, 0))),
                ("start_working_time", models.TimeField(default=datetime.time(0, 0))),
                (
                    "assessment_tool",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessment.assessmenttool",
                    ),
                ),
                (
                    "test_flow",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessment.testflow",
                    ),
                ),
            ],
            options={
                "ordering": ["release_time", "start_working_time"],
                "get_latest_by": "start_working_time",
            },
        ),
        migrations.AddField(
            model_name="testflow",
            name="tools",
            field=models.ManyToManyField(
                through="assessment.TestFlowTool", to="assessment.assessmenttool"
            ),
        ),
        migrations.AddField(
            model_name="assessmenteventparticipation",
            name="attempt",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="assessment.testflowattempt",
            ),
        ),
        migrations.AddField(
            model_name="assessmentevent",
            name="test_flow_used",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT, to="assessment.testflow"
            ),
        ),
        migrations.CreateModel(
            name="ResponseTest",
            fields=[
                (
                    "assessmenttool_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="assessment.assessmenttool",
                    ),
                ),
                ("subject", models.TextField()),
                ("prompt", models.TextField()),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.assessor"
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects",},
            bases=("assessment.assessmenttool",),
        ),
        migrations.AddField(
            model_name="question",
            name="interactive_quiz",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="questions",
                to="assessment.interactivequiz",
            ),
        ),
        migrations.CreateModel(
            name="MultipleChoiceAnswerOption",
            fields=[
                (
                    "answer_option_id",
                    models.UUIDField(
                        auto_created=True,
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("content", models.TextField()),
                ("correct", models.BooleanField(default=False)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="assessment.multiplechoicequestion",
                    ),
                ),
            ],
        ),
    ]
